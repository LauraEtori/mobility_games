#!/usr/bin/env python
PACKAGE = "mobility_games"

from dynamic_reconfigure.parameter_generator_catkin import *
import os
from rospkg import RosPack
from configHelper import soundFinder

gen = ParameterGenerator()

#gen.add("pc_audio_gmode", str_t, 0, "Mode for sound information (p = pitch, v = volume, r = rate, t = tracks)",   'pvr')
gen.add("on", bool_t, 0, "Play/Pause Button", False)

gen.add("T_________________Pitch__________________T", bool_t, 0, "Pitch Parameter", False)
gen.add("pitch", bool_t, 0, "Automate pitch based on distance",   True)
gen.add("pitchDefault", str_t, 0, "Set Pitch when not automated", '')
gen.add("randRange", double_t, 0, "Range of notes to choose.", 1, 0, 2)
key_enum = gen.enum([  gen.const("C",     str_t, 'C', "C Key"),
                        gen.const("C#",     str_t, 'C#', "C# Key"),
                        gen.const("D",     str_t, 'D', "D Key"),
                        gen.const("D#",     str_t, 'D#', "D# Key"),
                        gen.const("E",     str_t, 'E', "E Key"),
                        gen.const("F",     str_t, 'F', "F Key"),
                        gen.const("F#",     str_t, 'F#', "F# Key"),
                        gen.const("G",     str_t, 'G', "G Key"),
                        gen.const("G#",     str_t, 'G#', "G# Key"),
                        gen.const("A",     str_t, 'A', "A Key"),
                        gen.const("A#",     str_t, 'A#', "A# Key"),
                        gen.const("B",     str_t, 'B', "B Key")],
                      "An enum to set Key")

#gen.add("siz", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
gen.add("key", str_t, 0, "Key that sounds are quantized to", "A", edit_method=key_enum)
gen.add("quantType", str_t, 0, "Quantize Type: scale or chord", "chromatic")

gen.add("T_________________Volume__________________T", bool_t, 0, "Volume Parameter", False)
gen.add("vol", bool_t, 0, "Automate volume based on distance",   True)
gen.add("volDefault", double_t, 0, "Set Volume when not automated", .8, 0, 1)

gen.add("T_________________Rate__________________T", bool_t, 0, "Rate Parameter", False)
gen.add("rate", bool_t, 0, "Automate play rate based on distance",   True)
gen.add("rateDefault", double_t, 0, "Set Rate when not automated", 15, .33, 30)

gen.add("T_________________Success__________________T", bool_t, 0, "Success Parameters", False)
gen.add("ding", bool_t, 0, "Use reward sound, currently a ding.",   False)
gen.add("successZoneSize", double_t, 0, "Size of the success Zone", .5, 0, 2)
## SUCCESS SOUND FINDING
soundFinder(gen);


gen.add("T_________________Music__________________T", bool_t, 0, "Music Parameters", False)
gen.add("track", bool_t, 0, "Use a track instead of a sin wave",   False)




exit(gen.generate(PACKAGE, "mobility_games", "WallAudio"))
